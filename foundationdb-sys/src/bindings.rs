/* automatically generated by rust-bindgen */

pub const FDB_API_VERSION: u32 = 510;
pub const __WORDSIZE: u32 = 64;
pub const __DARWIN_ONLY_64_BIT_INO_T: u32 = 0;
pub const __DARWIN_ONLY_VERS_1050: u32 = 0;
pub const __DARWIN_ONLY_UNIX_CONFORMANCE: u32 = 1;
pub const __DARWIN_UNIX03: u32 = 1;
pub const __DARWIN_64_BIT_INO_T: u32 = 0;
pub const __DARWIN_VERS_1050: u32 = 0;
pub const __DARWIN_NON_CANCELABLE: u32 = 0;
pub const __DARWIN_SUF_EXTSN: &'static [u8; 14usize] = b"$DARWIN_EXTSN\0";
pub const __DARWIN_C_ANSI: u32 = 4096;
pub const __DARWIN_C_FULL: u32 = 900000;
pub const __DARWIN_C_LEVEL: u32 = 900000;
pub const __STDC_WANT_LIB_EXT1__: u32 = 1;
pub const __DARWIN_NO_LONG_LONG: u32 = 0;
pub const _DARWIN_FEATURE_ONLY_UNIX_CONFORMANCE: u32 = 1;
pub const _DARWIN_FEATURE_UNIX_CONFORMANCE: u32 = 3;
pub const __PTHREAD_SIZE__: u32 = 8176;
pub const __PTHREAD_ATTR_SIZE__: u32 = 56;
pub const __PTHREAD_MUTEXATTR_SIZE__: u32 = 8;
pub const __PTHREAD_MUTEX_SIZE__: u32 = 56;
pub const __PTHREAD_CONDATTR_SIZE__: u32 = 8;
pub const __PTHREAD_COND_SIZE__: u32 = 40;
pub const __PTHREAD_ONCE_SIZE__: u32 = 8;
pub const __PTHREAD_RWLOCK_SIZE__: u32 = 192;
pub const __PTHREAD_RWLOCKATTR_SIZE__: u32 = 16;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const INT64_MAX: u64 = 9223372036854775807;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT64_MIN: i64 = -9223372036854775808;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const UINT64_MAX: i32 = -1;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST64_MIN: i64 = -9223372036854775808;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const INT_LEAST64_MAX: u64 = 9223372036854775807;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const UINT_LEAST64_MAX: i32 = -1;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i32 = -32768;
pub const INT_FAST32_MIN: i32 = -2147483648;
pub const INT_FAST64_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u32 = 32767;
pub const INT_FAST32_MAX: u32 = 2147483647;
pub const INT_FAST64_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: u32 = 65535;
pub const UINT_FAST32_MAX: u32 = 4294967295;
pub const UINT_FAST64_MAX: i32 = -1;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const UINTPTR_MAX: i32 = -1;
pub const INTMAX_MIN: i64 = -9223372036854775808;
pub const INTMAX_MAX: u64 = 9223372036854775807;
pub const UINTMAX_MAX: i32 = -1;
pub const PTRDIFF_MIN: i64 = -9223372036854775808;
pub const PTRDIFF_MAX: u64 = 9223372036854775807;
pub const SIZE_MAX: i32 = -1;
pub const RSIZE_MAX: i32 = -1;
pub const WINT_MIN: i32 = -2147483648;
pub const WINT_MAX: u32 = 2147483647;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub type int_least8_t = i8;
pub type int_least16_t = i16;
pub type int_least32_t = i32;
pub type int_least64_t = i64;
pub type uint_least8_t = u8;
pub type uint_least16_t = u16;
pub type uint_least32_t = u32;
pub type uint_least64_t = u64;
pub type int_fast8_t = i8;
pub type int_fast16_t = i16;
pub type int_fast32_t = i32;
pub type int_fast64_t = i64;
pub type uint_fast8_t = u8;
pub type uint_fast16_t = u16;
pub type uint_fast32_t = u32;
pub type uint_fast64_t = u64;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_longlong;
pub type __uint64_t = ::std::os::raw::c_ulonglong;
pub type __darwin_intptr_t = ::std::os::raw::c_long;
pub type __darwin_natural_t = ::std::os::raw::c_uint;
pub type __darwin_ct_rune_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __mbstate_t {
    pub __mbstate8: [::std::os::raw::c_char; 128usize],
    pub _mbstateL: ::std::os::raw::c_longlong,
    _bindgen_union_align: [u64; 16usize],
}
#[test]
fn bindgen_test_layout___mbstate_t() {
    assert_eq!(
        ::std::mem::size_of::<__mbstate_t>(),
        128usize,
        concat!("Size of: ", stringify!(__mbstate_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__mbstate_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__mbstate_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__mbstate_t>())).__mbstate8 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t),
            "::",
            stringify!(__mbstate8)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__mbstate_t>()))._mbstateL as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t),
            "::",
            stringify!(_mbstateL)
        )
    );
}
pub type __darwin_mbstate_t = __mbstate_t;
pub type __darwin_ptrdiff_t = ::std::os::raw::c_long;
pub type __darwin_size_t = ::std::os::raw::c_ulong;
pub type __darwin_va_list = __builtin_va_list;
pub type __darwin_wchar_t = ::std::os::raw::c_int;
pub type __darwin_rune_t = __darwin_wchar_t;
pub type __darwin_wint_t = ::std::os::raw::c_int;
pub type __darwin_clock_t = ::std::os::raw::c_ulong;
pub type __darwin_socklen_t = __uint32_t;
pub type __darwin_ssize_t = ::std::os::raw::c_long;
pub type __darwin_time_t = ::std::os::raw::c_long;
pub type __darwin_blkcnt_t = __int64_t;
pub type __darwin_blksize_t = __int32_t;
pub type __darwin_dev_t = __int32_t;
pub type __darwin_fsblkcnt_t = ::std::os::raw::c_uint;
pub type __darwin_fsfilcnt_t = ::std::os::raw::c_uint;
pub type __darwin_gid_t = __uint32_t;
pub type __darwin_id_t = __uint32_t;
pub type __darwin_ino64_t = __uint64_t;
pub type __darwin_ino_t = __uint32_t;
pub type __darwin_mach_port_name_t = __darwin_natural_t;
pub type __darwin_mach_port_t = __darwin_mach_port_name_t;
pub type __darwin_mode_t = __uint16_t;
pub type __darwin_off_t = __int64_t;
pub type __darwin_pid_t = __int32_t;
pub type __darwin_sigset_t = __uint32_t;
pub type __darwin_suseconds_t = __int32_t;
pub type __darwin_uid_t = __uint32_t;
pub type __darwin_useconds_t = __uint32_t;
pub type __darwin_uuid_t = [::std::os::raw::c_uchar; 16usize];
pub type __darwin_uuid_string_t = [::std::os::raw::c_char; 37usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_pthread_handler_rec {
    pub __routine: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
    pub __arg: *mut ::std::os::raw::c_void,
    pub __next: *mut __darwin_pthread_handler_rec,
}
#[test]
fn bindgen_test_layout___darwin_pthread_handler_rec() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_pthread_handler_rec>(),
        24usize,
        concat!("Size of: ", stringify!(__darwin_pthread_handler_rec))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_pthread_handler_rec>(),
        8usize,
        concat!("Alignment of ", stringify!(__darwin_pthread_handler_rec))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_pthread_handler_rec>())).__routine as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_pthread_handler_rec),
            "::",
            stringify!(__routine)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_pthread_handler_rec>())).__arg as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_pthread_handler_rec),
            "::",
            stringify!(__arg)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_pthread_handler_rec>())).__next as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_pthread_handler_rec),
            "::",
            stringify!(__next)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _opaque_pthread_attr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 56usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_attr_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_attr_t>(),
        64usize,
        concat!("Size of: ", stringify!(_opaque_pthread_attr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_attr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_attr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_opaque_pthread_attr_t>())).__sig as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_attr_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_opaque_pthread_attr_t>())).__opaque as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_attr_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _opaque_pthread_cond_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 40usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_cond_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_cond_t>(),
        48usize,
        concat!("Size of: ", stringify!(_opaque_pthread_cond_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_cond_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_cond_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_opaque_pthread_cond_t>())).__sig as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_cond_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_opaque_pthread_cond_t>())).__opaque as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_cond_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_condattr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 8usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_condattr_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_condattr_t>(),
        16usize,
        concat!("Size of: ", stringify!(_opaque_pthread_condattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_condattr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_condattr_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_opaque_pthread_condattr_t>())).__sig as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_condattr_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_opaque_pthread_condattr_t>())).__opaque as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_condattr_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _opaque_pthread_mutex_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 56usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_mutex_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_mutex_t>(),
        64usize,
        concat!("Size of: ", stringify!(_opaque_pthread_mutex_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_mutex_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_mutex_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_opaque_pthread_mutex_t>())).__sig as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_mutex_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_opaque_pthread_mutex_t>())).__opaque as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_mutex_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_mutexattr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 8usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_mutexattr_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_mutexattr_t>(),
        16usize,
        concat!("Size of: ", stringify!(_opaque_pthread_mutexattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_mutexattr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_mutexattr_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_opaque_pthread_mutexattr_t>())).__sig as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_mutexattr_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_opaque_pthread_mutexattr_t>())).__opaque as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_mutexattr_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_once_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 8usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_once_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_once_t>(),
        16usize,
        concat!("Size of: ", stringify!(_opaque_pthread_once_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_once_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_once_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_opaque_pthread_once_t>())).__sig as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_once_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_opaque_pthread_once_t>())).__opaque as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_once_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _opaque_pthread_rwlock_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 192usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_rwlock_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_rwlock_t>(),
        200usize,
        concat!("Size of: ", stringify!(_opaque_pthread_rwlock_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_rwlock_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_rwlock_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_opaque_pthread_rwlock_t>())).__sig as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_rwlock_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_opaque_pthread_rwlock_t>())).__opaque as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_rwlock_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_rwlockattr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 16usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_rwlockattr_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_rwlockattr_t>(),
        24usize,
        concat!("Size of: ", stringify!(_opaque_pthread_rwlockattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_rwlockattr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_rwlockattr_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_opaque_pthread_rwlockattr_t>())).__sig as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_rwlockattr_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_opaque_pthread_rwlockattr_t>())).__opaque as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_rwlockattr_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _opaque_pthread_t {
    pub __sig: ::std::os::raw::c_long,
    pub __cleanup_stack: *mut __darwin_pthread_handler_rec,
    pub __opaque: [::std::os::raw::c_char; 8176usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_t>(),
        8192usize,
        concat!("Size of: ", stringify!(_opaque_pthread_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_opaque_pthread_t>())).__sig as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_opaque_pthread_t>())).__cleanup_stack as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_t),
            "::",
            stringify!(__cleanup_stack)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_opaque_pthread_t>())).__opaque as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_t),
            "::",
            stringify!(__opaque)
        )
    );
}
pub type __darwin_pthread_attr_t = _opaque_pthread_attr_t;
pub type __darwin_pthread_cond_t = _opaque_pthread_cond_t;
pub type __darwin_pthread_condattr_t = _opaque_pthread_condattr_t;
pub type __darwin_pthread_key_t = ::std::os::raw::c_ulong;
pub type __darwin_pthread_mutex_t = _opaque_pthread_mutex_t;
pub type __darwin_pthread_mutexattr_t = _opaque_pthread_mutexattr_t;
pub type __darwin_pthread_once_t = _opaque_pthread_once_t;
pub type __darwin_pthread_rwlock_t = _opaque_pthread_rwlock_t;
pub type __darwin_pthread_rwlockattr_t = _opaque_pthread_rwlockattr_t;
pub type __darwin_pthread_t = *mut _opaque_pthread_t;
pub type u_int8_t = ::std::os::raw::c_uchar;
pub type u_int16_t = ::std::os::raw::c_ushort;
pub type u_int32_t = ::std::os::raw::c_uint;
pub type u_int64_t = ::std::os::raw::c_ulonglong;
pub type register_t = i64;
pub type user_addr_t = u_int64_t;
pub type user_size_t = u_int64_t;
pub type user_ssize_t = i64;
pub type user_long_t = i64;
pub type user_ulong_t = u_int64_t;
pub type user_time_t = i64;
pub type user_off_t = i64;
pub type syscall_arg_t = u_int64_t;
pub type intmax_t = ::std::os::raw::c_long;
pub type uintmax_t = ::std::os::raw::c_ulong;
pub const FDBNetworkOption_FDB_NET_OPTION_LOCAL_ADDRESS: FDBNetworkOption = 10;
pub const FDBNetworkOption_FDB_NET_OPTION_CLUSTER_FILE: FDBNetworkOption = 20;
pub const FDBNetworkOption_FDB_NET_OPTION_TRACE_ENABLE: FDBNetworkOption = 30;
pub const FDBNetworkOption_FDB_NET_OPTION_TRACE_ROLL_SIZE: FDBNetworkOption = 31;
pub const FDBNetworkOption_FDB_NET_OPTION_TRACE_MAX_LOGS_SIZE: FDBNetworkOption = 32;
pub const FDBNetworkOption_FDB_NET_OPTION_TRACE_LOG_GROUP: FDBNetworkOption = 33;
pub const FDBNetworkOption_FDB_NET_OPTION_KNOB: FDBNetworkOption = 40;
pub const FDBNetworkOption_FDB_NET_OPTION_TLS_PLUGIN: FDBNetworkOption = 41;
pub const FDBNetworkOption_FDB_NET_OPTION_TLS_CERT_BYTES: FDBNetworkOption = 42;
pub const FDBNetworkOption_FDB_NET_OPTION_TLS_CERT_PATH: FDBNetworkOption = 43;
pub const FDBNetworkOption_FDB_NET_OPTION_TLS_KEY_BYTES: FDBNetworkOption = 45;
pub const FDBNetworkOption_FDB_NET_OPTION_TLS_KEY_PATH: FDBNetworkOption = 46;
pub const FDBNetworkOption_FDB_NET_OPTION_TLS_VERIFY_PEERS: FDBNetworkOption = 47;
pub const FDBNetworkOption_FDB_NET_OPTION_BUGGIFY_ENABLE: FDBNetworkOption = 48;
pub const FDBNetworkOption_FDB_NET_OPTION_BUGGIFY_DISABLE: FDBNetworkOption = 49;
pub const FDBNetworkOption_FDB_NET_OPTION_BUGGIFY_SECTION_ACTIVATED_PROBABILITY: FDBNetworkOption =
    50;
pub const FDBNetworkOption_FDB_NET_OPTION_BUGGIFY_SECTION_FIRED_PROBABILITY: FDBNetworkOption = 51;
pub const FDBNetworkOption_FDB_NET_OPTION_DISABLE_MULTI_VERSION_CLIENT_API: FDBNetworkOption = 60;
pub const FDBNetworkOption_FDB_NET_OPTION_CALLBACKS_ON_EXTERNAL_THREADS: FDBNetworkOption = 61;
pub const FDBNetworkOption_FDB_NET_OPTION_EXTERNAL_CLIENT_LIBRARY: FDBNetworkOption = 62;
pub const FDBNetworkOption_FDB_NET_OPTION_EXTERNAL_CLIENT_DIRECTORY: FDBNetworkOption = 63;
pub const FDBNetworkOption_FDB_NET_OPTION_DISABLE_LOCAL_CLIENT: FDBNetworkOption = 64;
pub const FDBNetworkOption_FDB_NET_OPTION_DISABLE_CLIENT_STATISTICS_LOGGING: FDBNetworkOption = 70;
pub const FDBNetworkOption_FDB_NET_OPTION_ENABLE_SLOW_TASK_PROFILING: FDBNetworkOption = 71;
pub type FDBNetworkOption = u32;
pub const FDBClusterOption_FDB_CLUSTER_OPTION_DUMMY_DO_NOT_USE: FDBClusterOption = -1;
pub type FDBClusterOption = i32;
pub const FDBDatabaseOption_FDB_DB_OPTION_LOCATION_CACHE_SIZE: FDBDatabaseOption = 10;
pub const FDBDatabaseOption_FDB_DB_OPTION_MAX_WATCHES: FDBDatabaseOption = 20;
pub const FDBDatabaseOption_FDB_DB_OPTION_MACHINE_ID: FDBDatabaseOption = 21;
pub const FDBDatabaseOption_FDB_DB_OPTION_DATACENTER_ID: FDBDatabaseOption = 22;
pub type FDBDatabaseOption = u32;
pub const FDBTransactionOption_FDB_TR_OPTION_CAUSAL_WRITE_RISKY: FDBTransactionOption = 10;
pub const FDBTransactionOption_FDB_TR_OPTION_CAUSAL_READ_RISKY: FDBTransactionOption = 20;
pub const FDBTransactionOption_FDB_TR_OPTION_CAUSAL_READ_DISABLE: FDBTransactionOption = 21;
pub const FDBTransactionOption_FDB_TR_OPTION_NEXT_WRITE_NO_WRITE_CONFLICT_RANGE:
    FDBTransactionOption = 30;
pub const FDBTransactionOption_FDB_TR_OPTION_COMMIT_ON_FIRST_PROXY: FDBTransactionOption = 40;
pub const FDBTransactionOption_FDB_TR_OPTION_CHECK_WRITES_ENABLE: FDBTransactionOption = 50;
pub const FDBTransactionOption_FDB_TR_OPTION_READ_YOUR_WRITES_DISABLE: FDBTransactionOption = 51;
pub const FDBTransactionOption_FDB_TR_OPTION_READ_AHEAD_DISABLE: FDBTransactionOption = 52;
pub const FDBTransactionOption_FDB_TR_OPTION_DURABILITY_DATACENTER: FDBTransactionOption = 110;
pub const FDBTransactionOption_FDB_TR_OPTION_DURABILITY_RISKY: FDBTransactionOption = 120;
pub const FDBTransactionOption_FDB_TR_OPTION_DURABILITY_DEV_NULL_IS_WEB_SCALE:
    FDBTransactionOption = 130;
pub const FDBTransactionOption_FDB_TR_OPTION_PRIORITY_SYSTEM_IMMEDIATE: FDBTransactionOption = 200;
pub const FDBTransactionOption_FDB_TR_OPTION_PRIORITY_BATCH: FDBTransactionOption = 201;
pub const FDBTransactionOption_FDB_TR_OPTION_INITIALIZE_NEW_DATABASE: FDBTransactionOption = 300;
pub const FDBTransactionOption_FDB_TR_OPTION_ACCESS_SYSTEM_KEYS: FDBTransactionOption = 301;
pub const FDBTransactionOption_FDB_TR_OPTION_READ_SYSTEM_KEYS: FDBTransactionOption = 302;
pub const FDBTransactionOption_FDB_TR_OPTION_DEBUG_DUMP: FDBTransactionOption = 400;
pub const FDBTransactionOption_FDB_TR_OPTION_DEBUG_RETRY_LOGGING: FDBTransactionOption = 401;
pub const FDBTransactionOption_FDB_TR_OPTION_TRANSACTION_LOGGING_ENABLE: FDBTransactionOption = 402;
pub const FDBTransactionOption_FDB_TR_OPTION_TIMEOUT: FDBTransactionOption = 500;
pub const FDBTransactionOption_FDB_TR_OPTION_RETRY_LIMIT: FDBTransactionOption = 501;
pub const FDBTransactionOption_FDB_TR_OPTION_MAX_RETRY_DELAY: FDBTransactionOption = 502;
pub const FDBTransactionOption_FDB_TR_OPTION_SNAPSHOT_RYW_ENABLE: FDBTransactionOption = 600;
pub const FDBTransactionOption_FDB_TR_OPTION_SNAPSHOT_RYW_DISABLE: FDBTransactionOption = 601;
pub const FDBTransactionOption_FDB_TR_OPTION_LOCK_AWARE: FDBTransactionOption = 700;
pub const FDBTransactionOption_FDB_TR_OPTION_USED_DURING_COMMIT_PROTECTION_DISABLE:
    FDBTransactionOption = 701;
pub const FDBTransactionOption_FDB_TR_OPTION_READ_LOCK_AWARE: FDBTransactionOption = 702;
pub type FDBTransactionOption = u32;
pub const FDBStreamingMode_FDB_STREAMING_MODE_WANT_ALL: FDBStreamingMode = -2;
pub const FDBStreamingMode_FDB_STREAMING_MODE_ITERATOR: FDBStreamingMode = -1;
pub const FDBStreamingMode_FDB_STREAMING_MODE_EXACT: FDBStreamingMode = 0;
pub const FDBStreamingMode_FDB_STREAMING_MODE_SMALL: FDBStreamingMode = 1;
pub const FDBStreamingMode_FDB_STREAMING_MODE_MEDIUM: FDBStreamingMode = 2;
pub const FDBStreamingMode_FDB_STREAMING_MODE_LARGE: FDBStreamingMode = 3;
pub const FDBStreamingMode_FDB_STREAMING_MODE_SERIAL: FDBStreamingMode = 4;
pub type FDBStreamingMode = i32;
pub const FDBMutationType_FDB_MUTATION_TYPE_ADD: FDBMutationType = 2;
pub const FDBMutationType_FDB_MUTATION_TYPE_AND: FDBMutationType = 6;
pub const FDBMutationType_FDB_MUTATION_TYPE_BIT_AND: FDBMutationType = 6;
pub const FDBMutationType_FDB_MUTATION_TYPE_OR: FDBMutationType = 7;
pub const FDBMutationType_FDB_MUTATION_TYPE_BIT_OR: FDBMutationType = 7;
pub const FDBMutationType_FDB_MUTATION_TYPE_XOR: FDBMutationType = 8;
pub const FDBMutationType_FDB_MUTATION_TYPE_BIT_XOR: FDBMutationType = 8;
pub const FDBMutationType_FDB_MUTATION_TYPE_MAX: FDBMutationType = 12;
pub const FDBMutationType_FDB_MUTATION_TYPE_MIN: FDBMutationType = 13;
pub const FDBMutationType_FDB_MUTATION_TYPE_SET_VERSIONSTAMPED_KEY: FDBMutationType = 14;
pub const FDBMutationType_FDB_MUTATION_TYPE_SET_VERSIONSTAMPED_VALUE: FDBMutationType = 15;
pub const FDBMutationType_FDB_MUTATION_TYPE_BYTE_MIN: FDBMutationType = 16;
pub const FDBMutationType_FDB_MUTATION_TYPE_BYTE_MAX: FDBMutationType = 17;
pub type FDBMutationType = u32;
pub const FDBConflictRangeType_FDB_CONFLICT_RANGE_TYPE_READ: FDBConflictRangeType = 0;
pub const FDBConflictRangeType_FDB_CONFLICT_RANGE_TYPE_WRITE: FDBConflictRangeType = 1;
pub type FDBConflictRangeType = u32;
pub const FDBErrorPredicate_FDB_ERROR_PREDICATE_RETRYABLE: FDBErrorPredicate = 50000;
pub const FDBErrorPredicate_FDB_ERROR_PREDICATE_MAYBE_COMMITTED: FDBErrorPredicate = 50001;
pub const FDBErrorPredicate_FDB_ERROR_PREDICATE_RETRYABLE_NOT_COMMITTED: FDBErrorPredicate = 50002;
pub type FDBErrorPredicate = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct future {
    _unused: [u8; 0],
}
pub type FDBFuture = future;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cluster {
    _unused: [u8; 0],
}
pub type FDBCluster = cluster;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct database {
    _unused: [u8; 0],
}
pub type FDBDatabase = database;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct transaction {
    _unused: [u8; 0],
}
pub type FDBTransaction = transaction;
pub type fdb_error_t = ::std::os::raw::c_int;
pub type fdb_bool_t = ::std::os::raw::c_int;
extern "C" {
    #[link_name = "\u{1}_fdb_get_error"]
    pub fn fdb_get_error(code: fdb_error_t) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_fdb_error_predicate"]
    pub fn fdb_error_predicate(
        predicate_test: ::std::os::raw::c_int,
        code: fdb_error_t,
    ) -> fdb_bool_t;
}
extern "C" {
    #[link_name = "\u{1}_fdb_network_set_option"]
    pub fn fdb_network_set_option(
        option: FDBNetworkOption,
        value: *const u8,
        value_length: ::std::os::raw::c_int,
    ) -> fdb_error_t;
}
extern "C" {
    #[link_name = "\u{1}_fdb_setup_network"]
    pub fn fdb_setup_network() -> fdb_error_t;
}
extern "C" {
    #[link_name = "\u{1}_fdb_run_network"]
    pub fn fdb_run_network() -> fdb_error_t;
}
extern "C" {
    #[link_name = "\u{1}_fdb_stop_network"]
    pub fn fdb_stop_network() -> fdb_error_t;
}
extern "C" {
    #[link_name = "\u{1}_fdb_add_network_thread_completion_hook"]
    pub fn fdb_add_network_thread_completion_hook(
        hook: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
        hook_parameter: *mut ::std::os::raw::c_void,
    ) -> fdb_error_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct keyvalue {
    pub _bindgen_opaque_blob: [u32; 6usize],
}
#[test]
fn bindgen_test_layout_keyvalue() {
    assert_eq!(
        ::std::mem::size_of::<keyvalue>(),
        24usize,
        concat!("Size of: ", stringify!(keyvalue))
    );
    assert_eq!(
        ::std::mem::align_of::<keyvalue>(),
        4usize,
        concat!("Alignment of ", stringify!(keyvalue))
    );
}
pub type FDBKeyValue = keyvalue;
extern "C" {
    #[link_name = "\u{1}_fdb_future_cancel"]
    pub fn fdb_future_cancel(f: *mut FDBFuture);
}
extern "C" {
    #[link_name = "\u{1}_fdb_future_release_memory"]
    pub fn fdb_future_release_memory(f: *mut FDBFuture);
}
extern "C" {
    #[link_name = "\u{1}_fdb_future_destroy"]
    pub fn fdb_future_destroy(f: *mut FDBFuture);
}
extern "C" {
    #[link_name = "\u{1}_fdb_future_block_until_ready"]
    pub fn fdb_future_block_until_ready(f: *mut FDBFuture) -> fdb_error_t;
}
extern "C" {
    #[link_name = "\u{1}_fdb_future_is_ready"]
    pub fn fdb_future_is_ready(f: *mut FDBFuture) -> fdb_bool_t;
}
pub type FDBCallback = ::std::option::Option<
    unsafe extern "C" fn(future: *mut FDBFuture, callback_parameter: *mut ::std::os::raw::c_void),
>;
extern "C" {
    #[link_name = "\u{1}_fdb_future_set_callback"]
    pub fn fdb_future_set_callback(
        f: *mut FDBFuture,
        callback: FDBCallback,
        callback_parameter: *mut ::std::os::raw::c_void,
    ) -> fdb_error_t;
}
extern "C" {
    #[link_name = "\u{1}_fdb_future_get_error"]
    pub fn fdb_future_get_error(f: *mut FDBFuture) -> fdb_error_t;
}
extern "C" {
    #[link_name = "\u{1}_fdb_future_get_version"]
    pub fn fdb_future_get_version(f: *mut FDBFuture, out_version: *mut i64) -> fdb_error_t;
}
extern "C" {
    #[link_name = "\u{1}_fdb_future_get_key"]
    pub fn fdb_future_get_key(
        f: *mut FDBFuture,
        out_key: *mut *const u8,
        out_key_length: *mut ::std::os::raw::c_int,
    ) -> fdb_error_t;
}
extern "C" {
    #[link_name = "\u{1}_fdb_future_get_cluster"]
    pub fn fdb_future_get_cluster(
        f: *mut FDBFuture,
        out_cluster: *mut *mut FDBCluster,
    ) -> fdb_error_t;
}
extern "C" {
    #[link_name = "\u{1}_fdb_future_get_database"]
    pub fn fdb_future_get_database(
        f: *mut FDBFuture,
        out_database: *mut *mut FDBDatabase,
    ) -> fdb_error_t;
}
extern "C" {
    #[link_name = "\u{1}_fdb_future_get_value"]
    pub fn fdb_future_get_value(
        f: *mut FDBFuture,
        out_present: *mut fdb_bool_t,
        out_value: *mut *const u8,
        out_value_length: *mut ::std::os::raw::c_int,
    ) -> fdb_error_t;
}
extern "C" {
    #[link_name = "\u{1}_fdb_future_get_keyvalue_array"]
    pub fn fdb_future_get_keyvalue_array(
        f: *mut FDBFuture,
        out_kv: *mut *const FDBKeyValue,
        out_count: *mut ::std::os::raw::c_int,
        out_more: *mut fdb_bool_t,
    ) -> fdb_error_t;
}
extern "C" {
    #[link_name = "\u{1}_fdb_future_get_string_array"]
    pub fn fdb_future_get_string_array(
        f: *mut FDBFuture,
        out_strings: *mut *mut *const ::std::os::raw::c_char,
        out_count: *mut ::std::os::raw::c_int,
    ) -> fdb_error_t;
}
extern "C" {
    #[link_name = "\u{1}_fdb_create_cluster"]
    pub fn fdb_create_cluster(cluster_file_path: *const ::std::os::raw::c_char) -> *mut FDBFuture;
}
extern "C" {
    #[link_name = "\u{1}_fdb_cluster_destroy"]
    pub fn fdb_cluster_destroy(c: *mut FDBCluster);
}
extern "C" {
    #[link_name = "\u{1}_fdb_cluster_set_option"]
    pub fn fdb_cluster_set_option(
        c: *mut FDBCluster,
        option: FDBClusterOption,
        value: *const u8,
        value_length: ::std::os::raw::c_int,
    ) -> fdb_error_t;
}
extern "C" {
    #[link_name = "\u{1}_fdb_cluster_create_database"]
    pub fn fdb_cluster_create_database(
        c: *mut FDBCluster,
        db_name: *const u8,
        db_name_length: ::std::os::raw::c_int,
    ) -> *mut FDBFuture;
}
extern "C" {
    #[link_name = "\u{1}_fdb_database_destroy"]
    pub fn fdb_database_destroy(d: *mut FDBDatabase);
}
extern "C" {
    #[link_name = "\u{1}_fdb_database_set_option"]
    pub fn fdb_database_set_option(
        d: *mut FDBDatabase,
        option: FDBDatabaseOption,
        value: *const u8,
        value_length: ::std::os::raw::c_int,
    ) -> fdb_error_t;
}
extern "C" {
    #[link_name = "\u{1}_fdb_database_create_transaction"]
    pub fn fdb_database_create_transaction(
        d: *mut FDBDatabase,
        out_transaction: *mut *mut FDBTransaction,
    ) -> fdb_error_t;
}
extern "C" {
    #[link_name = "\u{1}_fdb_transaction_destroy"]
    pub fn fdb_transaction_destroy(tr: *mut FDBTransaction);
}
extern "C" {
    #[link_name = "\u{1}_fdb_transaction_cancel"]
    pub fn fdb_transaction_cancel(tr: *mut FDBTransaction);
}
extern "C" {
    #[link_name = "\u{1}_fdb_transaction_set_option"]
    pub fn fdb_transaction_set_option(
        tr: *mut FDBTransaction,
        option: FDBTransactionOption,
        value: *const u8,
        value_length: ::std::os::raw::c_int,
    ) -> fdb_error_t;
}
extern "C" {
    #[link_name = "\u{1}_fdb_transaction_set_read_version"]
    pub fn fdb_transaction_set_read_version(tr: *mut FDBTransaction, version: i64);
}
extern "C" {
    #[link_name = "\u{1}_fdb_transaction_get_read_version"]
    pub fn fdb_transaction_get_read_version(tr: *mut FDBTransaction) -> *mut FDBFuture;
}
extern "C" {
    #[link_name = "\u{1}_fdb_transaction_get"]
    pub fn fdb_transaction_get(
        tr: *mut FDBTransaction,
        key_name: *const u8,
        key_name_length: ::std::os::raw::c_int,
        snapshot: fdb_bool_t,
    ) -> *mut FDBFuture;
}
extern "C" {
    #[link_name = "\u{1}_fdb_transaction_get_key"]
    pub fn fdb_transaction_get_key(
        tr: *mut FDBTransaction,
        key_name: *const u8,
        key_name_length: ::std::os::raw::c_int,
        or_equal: fdb_bool_t,
        offset: ::std::os::raw::c_int,
        snapshot: fdb_bool_t,
    ) -> *mut FDBFuture;
}
extern "C" {
    #[link_name = "\u{1}_fdb_transaction_get_addresses_for_key"]
    pub fn fdb_transaction_get_addresses_for_key(
        tr: *mut FDBTransaction,
        key_name: *const u8,
        key_name_length: ::std::os::raw::c_int,
    ) -> *mut FDBFuture;
}
extern "C" {
    #[link_name = "\u{1}_fdb_transaction_get_range"]
    pub fn fdb_transaction_get_range(
        tr: *mut FDBTransaction,
        begin_key_name: *const u8,
        begin_key_name_length: ::std::os::raw::c_int,
        begin_or_equal: fdb_bool_t,
        begin_offset: ::std::os::raw::c_int,
        end_key_name: *const u8,
        end_key_name_length: ::std::os::raw::c_int,
        end_or_equal: fdb_bool_t,
        end_offset: ::std::os::raw::c_int,
        limit: ::std::os::raw::c_int,
        target_bytes: ::std::os::raw::c_int,
        mode: FDBStreamingMode,
        iteration: ::std::os::raw::c_int,
        snapshot: fdb_bool_t,
        reverse: fdb_bool_t,
    ) -> *mut FDBFuture;
}
extern "C" {
    #[link_name = "\u{1}_fdb_transaction_set"]
    pub fn fdb_transaction_set(
        tr: *mut FDBTransaction,
        key_name: *const u8,
        key_name_length: ::std::os::raw::c_int,
        value: *const u8,
        value_length: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}_fdb_transaction_atomic_op"]
    pub fn fdb_transaction_atomic_op(
        tr: *mut FDBTransaction,
        key_name: *const u8,
        key_name_length: ::std::os::raw::c_int,
        param: *const u8,
        param_length: ::std::os::raw::c_int,
        operation_type: FDBMutationType,
    );
}
extern "C" {
    #[link_name = "\u{1}_fdb_transaction_clear"]
    pub fn fdb_transaction_clear(
        tr: *mut FDBTransaction,
        key_name: *const u8,
        key_name_length: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}_fdb_transaction_clear_range"]
    pub fn fdb_transaction_clear_range(
        tr: *mut FDBTransaction,
        begin_key_name: *const u8,
        begin_key_name_length: ::std::os::raw::c_int,
        end_key_name: *const u8,
        end_key_name_length: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}_fdb_transaction_watch"]
    pub fn fdb_transaction_watch(
        tr: *mut FDBTransaction,
        key_name: *const u8,
        key_name_length: ::std::os::raw::c_int,
    ) -> *mut FDBFuture;
}
extern "C" {
    #[link_name = "\u{1}_fdb_transaction_commit"]
    pub fn fdb_transaction_commit(tr: *mut FDBTransaction) -> *mut FDBFuture;
}
extern "C" {
    #[link_name = "\u{1}_fdb_transaction_get_committed_version"]
    pub fn fdb_transaction_get_committed_version(
        tr: *mut FDBTransaction,
        out_version: *mut i64,
    ) -> fdb_error_t;
}
extern "C" {
    #[link_name = "\u{1}_fdb_transaction_get_versionstamp"]
    pub fn fdb_transaction_get_versionstamp(tr: *mut FDBTransaction) -> *mut FDBFuture;
}
extern "C" {
    #[link_name = "\u{1}_fdb_transaction_on_error"]
    pub fn fdb_transaction_on_error(tr: *mut FDBTransaction, error: fdb_error_t) -> *mut FDBFuture;
}
extern "C" {
    #[link_name = "\u{1}_fdb_transaction_reset"]
    pub fn fdb_transaction_reset(tr: *mut FDBTransaction);
}
extern "C" {
    #[link_name = "\u{1}_fdb_transaction_add_conflict_range"]
    pub fn fdb_transaction_add_conflict_range(
        tr: *mut FDBTransaction,
        begin_key_name: *const u8,
        begin_key_name_length: ::std::os::raw::c_int,
        end_key_name: *const u8,
        end_key_name_length: ::std::os::raw::c_int,
        type_: FDBConflictRangeType,
    ) -> fdb_error_t;
}
extern "C" {
    #[link_name = "\u{1}_fdb_select_api_version_impl"]
    pub fn fdb_select_api_version_impl(
        runtime_version: ::std::os::raw::c_int,
        header_version: ::std::os::raw::c_int,
    ) -> fdb_error_t;
}
extern "C" {
    #[link_name = "\u{1}_fdb_get_max_api_version"]
    pub fn fdb_get_max_api_version() -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_fdb_get_client_version"]
    pub fn fdb_get_client_version() -> *const ::std::os::raw::c_char;
}
pub type __builtin_va_list = [__va_list_tag; 1usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __va_list_tag {
    pub gp_offset: ::std::os::raw::c_uint,
    pub fp_offset: ::std::os::raw::c_uint,
    pub overflow_arg_area: *mut ::std::os::raw::c_void,
    pub reg_save_area: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout___va_list_tag() {
    assert_eq!(
        ::std::mem::size_of::<__va_list_tag>(),
        24usize,
        concat!("Size of: ", stringify!(__va_list_tag))
    );
    assert_eq!(
        ::std::mem::align_of::<__va_list_tag>(),
        8usize,
        concat!("Alignment of ", stringify!(__va_list_tag))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).gp_offset as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(gp_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).fp_offset as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(fp_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).overflow_arg_area as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(overflow_arg_area)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).reg_save_area as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(reg_save_area)
        )
    );
}
